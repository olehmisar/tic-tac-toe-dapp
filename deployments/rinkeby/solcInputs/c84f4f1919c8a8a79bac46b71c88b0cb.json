{
  "language": "Solidity",
  "sources": {
    "contracts/TicTacToe.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity 0.8.4;\n\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n\nstruct Game {\n    address player0;\n    address player1;\n    address winner;\n    uint8 result;\n}\n\nstruct GameEndRequest {\n    address requester;\n    uint256 createdAt;\n    uint8 kind;\n    Move move;\n    // Signature of all previous moves + move from this request.\n    bytes signature;\n}\n\nstruct Move {\n    address player;\n    uint256 i;\n    uint256 j;\n}\n\ncontract TicTacToe {\n    error BadSignature(address signer);\n\n    mapping(uint256 => Game) public getGame;\n    mapping(address => uint256) public getGameId;\n    mapping(address => uint256) public nonces;\n\n    mapping(uint256 => GameEndRequest) public getEndGameWithTimeoutRequest;\n    // TODO: adjust this value\n    // TODO: should this be configurable per game?\n    uint256 public constant GAME_END_TIMEOUT = 1 hours;\n    uint8 public constant REQUEST_CANCEL_END_GAME = 0;\n    uint8 public constant REQUEST_END_GAME = 1;\n\n    uint8 public constant IN_PROGRESS = 0;\n    uint8 public constant WON = 1;\n    uint8 public constant DRAW = 2;\n\n    uint8 public constant SIZE = 3;\n    struct State {\n        address lastPlayer;\n        address[SIZE][SIZE] board;\n    }\n\n    modifier isInProgress(uint256 gameId) {\n        require(getGame[gameId].result == IN_PROGRESS, \"game ended\");\n        _;\n    }\n\n    function startGame(address creator, address joined, bytes calldata creatorSig, bytes calldata joinedSig) external {\n        require(creator != joined, \"same address\");\n        require(getGameId[creator] == 0, \"already playing\");\n        require(getGameId[joined] == 0, \"already playing\");\n        uint256 gameId = calcGameId(creator);\n        // TODO: should we include `joined` in `creatorSig`?\n        _verify(encodeGameStart(gameId, creator, address(0)), creator, creatorSig);\n        _verify(encodeGameStart(gameId, creator, joined), joined, joinedSig);\n        nonces[creator]++;\n        getGameId[creator] = gameId;\n        getGameId[joined] = gameId;\n        getGame[gameId] = Game({\n            player0: creator,\n            player1: joined,\n            result: IN_PROGRESS,\n            winner: address(0)\n        });\n    }\n\n    function encodeGameStart(uint256 gameId, address creator, address joined) public pure returns (bytes32) {\n        return keccak256(abi.encode(gameId, creator, joined));\n    }\n\n    function calcGameId(address creator) public view returns (uint256) {\n        return uint256(keccak256(abi.encode(block.chainid, address(this), creator, nonces[creator])));\n    }\n\n    function endGameWithWinner(\n        uint256 gameId,\n        uint8 result,\n        address winner,\n        bytes calldata mySig,\n        bytes calldata opponentSig\n    ) external isInProgress(gameId) {\n        Game storage game = getGame[gameId];\n        (address me, address opponent) = _validateMsgSender(game);\n        bytes32 hash = encodeWinner(gameId, result, winner);\n        _verify(hash, me, mySig);\n        _verify(hash, opponent, opponentSig);\n        _endGame(game, result, winner);\n    }\n\n    function encodeWinner(uint256 gameId, uint8 result, address winner) public pure returns (bytes32) {\n        return keccak256(abi.encode(gameId, result, winner));\n    }\n\n    function endGameWithMoves(\n        uint256 gameId,\n        Move[] calldata moves,\n        bytes calldata mySig,\n        bytes calldata opponentSig\n    ) external isInProgress(gameId) {\n        (, uint8 result, address winner) = validateMoves(gameId, moves, mySig, opponentSig);\n        _endGame(getGame[gameId], result, winner);\n    }\n\n    function validateMoves(\n        uint256 gameId,\n        Move[] calldata moves,\n        bytes calldata mySig,\n        bytes calldata opponentSig\n    ) public view returns (State memory state, uint8 result, address winner) {\n        (address me, address opponent) = _validateMsgSender(getGame[gameId]);\n        _verifyMoves(gameId, moves, me, mySig);\n        _verifyMoves(gameId, moves, opponent, opponentSig);\n        state = initialState(gameId);\n        for (uint256 i = 0; i < moves.length; i++) {\n            doMove(state, moves[i]);\n        }\n        (result, winner) = checkWinners(state, moves.length, me, opponent);\n    }\n\n    function encodeMoves(uint256 gameId, Move[] calldata moves) public pure returns (bytes32) {\n        return keccak256(abi.encode(gameId, moves));\n    }\n\n    function _verifyMoves(uint256 gameId, Move[] calldata moves, address signer, bytes calldata signature) private pure {\n        // the last player must sign all moves; the second last player must sign `moves.length - 1` moves.\n        uint256 offset = moves.length > 0 && moves[moves.length - 1].player != signer ? 1 : 0;\n        _verify(encodeMoves(gameId, moves[0:moves.length - offset]), signer, signature);\n    }\n\n    function requestGameEndWithTimeout(\n        uint256 gameId,\n        Move[] calldata moves,\n        bytes calldata mySig,\n        bytes calldata opponentSig\n    ) external isInProgress(gameId) {\n        _makeGameEndWithTimeoutRequest(REQUEST_END_GAME, gameId, moves, mySig, opponentSig);\n    }\n\n    function cancelGameEndWithTimeoutRequest(\n        uint256 gameId,\n        Move[] calldata moves,\n        bytes calldata mySig,\n        bytes calldata opponentSig\n    ) external isInProgress(gameId) {\n        _makeGameEndWithTimeoutRequest(REQUEST_CANCEL_END_GAME, gameId, moves, mySig, opponentSig);\n    }\n\n    function _makeGameEndWithTimeoutRequest(\n        uint8 kind,\n        uint256 gameId,\n        Move[] calldata moves,\n        bytes calldata mySig,\n        bytes calldata opponentSig\n    ) private {\n        (address me,) = _validateMsgSender(getGame[gameId]);\n        require(moves.length > 1, \"!moves\");\n        Move calldata lastMove = moves[moves.length - 1];\n        require(lastMove.player == me, \"move not provided\");\n        (, uint8 result,) = validateMoves(gameId, moves, mySig, opponentSig);\n        require(result == IN_PROGRESS, \"!in progress\");\n        getEndGameWithTimeoutRequest[gameId] = GameEndRequest({\n            requester: me,\n            kind: kind,\n            createdAt: block.timestamp,\n            move: lastMove,\n            signature: mySig\n        });\n    }\n\n    function endGameWithTimeout(uint256 gameId) external isInProgress(gameId) {\n        Game storage game = getGame[gameId];\n        (address me,) = _validateMsgSender(game);\n        GameEndRequest storage request = getEndGameWithTimeoutRequest[gameId];\n        require(request.kind == REQUEST_END_GAME, \"!requested\");\n        require(request.requester == me, \"!requester\");\n        require(block.timestamp > request.createdAt + GAME_END_TIMEOUT, \"!timed out\");\n        _endGame(game, WON, me);\n    }\n\n    function checkWinners(\n        State memory state,\n        uint256 movesLength,\n        address me,\n        address opponent\n    ) public pure returns (uint8 result, address winner) {\n        (result, winner) = (IN_PROGRESS, address(0));\n        bool iWon = checkWinner(state.board, me);\n        bool opponentWon = checkWinner(state.board, opponent);\n        if (iWon) {\n            require(!opponentWon, \"two winners\");\n            return (WON, me);\n        }\n        if (opponentWon) {\n            return (WON, opponent);\n        }\n        if (movesLength == SIZE * SIZE) {\n            return (DRAW, address(0));\n        }\n        return (IN_PROGRESS, address(0));\n    }\n\n    function _endGame(Game storage game, uint8 result, address winner) private {\n        require(result == DRAW || result == WON, \"!end\");\n        if (result == DRAW) {\n            require(winner == address(0), \"!address(0)\");\n        }\n        game.result = result;\n        game.winner = winner;\n        getGameId[game.player0] = 0;\n        getGameId[game.player1] = 0;\n    }\n\n    function _validateMsgSender(Game storage game) private view returns (address me, address opponent) {\n        (address player0, address player1) = (game.player0, game.player1);\n        if (player0 == msg.sender) {\n            (me, opponent) = (player0, player1);\n        } else {\n            require(player1 == msg.sender, \"!player\");\n            (me, opponent) = (player1, player0);\n        }\n    }\n\n    function _recover(bytes32 hash, bytes calldata signature) private pure returns (address) {\n        return ECDSA.recover(ECDSA.toEthSignedMessageHash(hash), signature);\n    }\n\n    function _verify(bytes32 hash, address signer, bytes calldata signature) private pure {\n        if (_recover(hash, signature) != signer) {\n            revert BadSignature(signer);\n        }\n    }\n\n    // GAME LOGIC\n    function initialState(uint256 gameId) public view returns (State memory) {\n        Game storage game = getGame[gameId];\n        address[SIZE][SIZE] memory board;\n        return State({\n            lastPlayer: game.player1, // player0 should start\n            board: board\n        });\n    }\n\n    function doMove(State memory state, Move calldata move) public pure returns (State memory) {\n        require(state.board[move.i][move.j] == address(0), \"!empty\");\n        require(move.player != state.lastPlayer, \"!turn\");\n        state.board[move.i][move.j] = move.player;\n        state.lastPlayer = move.player;\n        return state;\n    }\n\n    function checkWinner(address[SIZE][SIZE] memory board, address winner) public pure returns (bool) {\n        // Check verticals\n        for (uint256 i = 0; i < SIZE; i++) {\n            uint256 sum = 0;\n            for (uint256 j = 0; j < SIZE; j++) {\n                if (board[i][j] == winner) {\n                    sum += 1;\n                }\n            }\n            if (sum == SIZE) {\n                return true;\n            }\n        }\n\n        // Check horizontals\n        for (uint256 j = 0; j < SIZE; j++) {\n            uint256 sum = 0;\n            for (uint256 i = 0; i < SIZE; i++) {\n                if (board[i][j] == winner) {\n                    sum += 1;\n                }\n            }\n            if (sum == SIZE) {\n                return true;\n            }\n        }\n\n        // Check diagonals\n        {\n            uint256 sum = 0;\n            for (uint256 i = 0; i < SIZE; i++) {\n                if (board[i][i] == winner) {\n                    sum += 1;\n                }\n            }\n            if (sum == SIZE) {\n                return true;\n            }\n        }\n        {\n            uint256 sum = 0;\n            for (uint256 i = 0; i < SIZE; i++) {\n                if (board[SIZE - i - 1][i] == winner) {\n                    sum += 1;\n                }\n            }\n            if (sum == SIZE) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return recover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return recover(hash, r, vs);\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"ECDSA: invalid signature 's' value\"\n        );\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}