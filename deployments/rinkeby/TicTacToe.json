{
  "address": "0x02e8A4C6b4DCc60135a27118Ec19B89Eca74ee41",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "BadSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DRAW",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAME_END_TIMEOUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IN_PROGRESS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_CANCEL_END_GAME",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_END_GAME",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIZE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WON",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "calcGameId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "j",
              "type": "uint256"
            }
          ],
          "internalType": "struct Move[]",
          "name": "moves",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "mySig",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "opponentSig",
          "type": "bytes"
        }
      ],
      "name": "cancelGameEndWithTimeoutRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[3][3]",
          "name": "board",
          "type": "address[3][3]"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "checkWinner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lastPlayer",
              "type": "address"
            },
            {
              "internalType": "address[3][3]",
              "name": "board",
              "type": "address[3][3]"
            }
          ],
          "internalType": "struct TicTacToe.State",
          "name": "state",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "movesLength",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "me",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "opponent",
          "type": "address"
        }
      ],
      "name": "checkWinners",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "result",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lastPlayer",
              "type": "address"
            },
            {
              "internalType": "address[3][3]",
              "name": "board",
              "type": "address[3][3]"
            }
          ],
          "internalType": "struct TicTacToe.State",
          "name": "state",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "j",
              "type": "uint256"
            }
          ],
          "internalType": "struct Move",
          "name": "move",
          "type": "tuple"
        }
      ],
      "name": "doMove",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lastPlayer",
              "type": "address"
            },
            {
              "internalType": "address[3][3]",
              "name": "board",
              "type": "address[3][3]"
            }
          ],
          "internalType": "struct TicTacToe.State",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "joined",
          "type": "address"
        }
      ],
      "name": "encodeGameStart",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "j",
              "type": "uint256"
            }
          ],
          "internalType": "struct Move[]",
          "name": "moves",
          "type": "tuple[]"
        }
      ],
      "name": "encodeMoves",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "result",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "encodeWinner",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "j",
              "type": "uint256"
            }
          ],
          "internalType": "struct Move[]",
          "name": "moves",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "mySig",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "opponentSig",
          "type": "bytes"
        }
      ],
      "name": "endGameWithMoves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "endGameWithTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "result",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "mySig",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "opponentSig",
          "type": "bytes"
        }
      ],
      "name": "endGameWithWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getEndGameWithTimeoutRequest",
      "outputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "kind",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "j",
              "type": "uint256"
            }
          ],
          "internalType": "struct Move",
          "name": "move",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getGame",
      "outputs": [
        {
          "internalType": "address",
          "name": "player0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "result",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "initialState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lastPlayer",
              "type": "address"
            },
            {
              "internalType": "address[3][3]",
              "name": "board",
              "type": "address[3][3]"
            }
          ],
          "internalType": "struct TicTacToe.State",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "j",
              "type": "uint256"
            }
          ],
          "internalType": "struct Move[]",
          "name": "moves",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "mySig",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "opponentSig",
          "type": "bytes"
        }
      ],
      "name": "requestGameEndWithTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "joined",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "creatorSig",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "joinedSig",
          "type": "bytes"
        }
      ],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "unfinishedGameIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "j",
              "type": "uint256"
            }
          ],
          "internalType": "struct Move[]",
          "name": "moves",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "mySig",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "opponentSig",
          "type": "bytes"
        }
      ],
      "name": "validateMoves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lastPlayer",
              "type": "address"
            },
            {
              "internalType": "address[3][3]",
              "name": "board",
              "type": "address[3][3]"
            }
          ],
          "internalType": "struct TicTacToe.State",
          "name": "state",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "result",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "validateMsgSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "me",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "opponent",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9dcfd07567936952d2ab90d93c213351a2b7899785886b6fb8d3cc0c8e02584d",
  "receipt": {
    "to": null,
    "from": "0xc28Bf645b0ae0605747283A80553d54201D31544",
    "contractAddress": "0x02e8A4C6b4DCc60135a27118Ec19B89Eca74ee41",
    "transactionIndex": 17,
    "gasUsed": "2107728",
    "logsBloom": "0x
    "blockHash": "0x348c4ccd291ba59b4e1d1ae8569e9bf3d2bf16bfc76e50c42ffdbfe0ff009f33",
    "transactionHash": "0x9dcfd07567936952d2ab90d93c213351a2b7899785886b6fb8d3cc0c8e02584d",
    "logs": [],
    "blockNumber": 9136485,
    "cumulativeGasUsed": "7716648",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7a410b5b6edbbc99c7268283772dad43",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"BadSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DRAW\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAME_END_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IN_PROGRESS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_CANCEL_END_GAME\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_END_GAME\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIZE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WON\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"calcGameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"internalType\":\"struct Move[]\",\"name\":\"moves\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"mySig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"opponentSig\",\"type\":\"bytes\"}],\"name\":\"cancelGameEndWithTimeoutRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[3][3]\",\"name\":\"board\",\"type\":\"address[3][3]\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"checkWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lastPlayer\",\"type\":\"address\"},{\"internalType\":\"address[3][3]\",\"name\":\"board\",\"type\":\"address[3][3]\"}],\"internalType\":\"struct TicTacToe.State\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"movesLength\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"me\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"}],\"name\":\"checkWinners\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lastPlayer\",\"type\":\"address\"},{\"internalType\":\"address[3][3]\",\"name\":\"board\",\"type\":\"address[3][3]\"}],\"internalType\":\"struct TicTacToe.State\",\"name\":\"state\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"internalType\":\"struct Move\",\"name\":\"move\",\"type\":\"tuple\"}],\"name\":\"doMove\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lastPlayer\",\"type\":\"address\"},{\"internalType\":\"address[3][3]\",\"name\":\"board\",\"type\":\"address[3][3]\"}],\"internalType\":\"struct TicTacToe.State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"joined\",\"type\":\"address\"}],\"name\":\"encodeGameStart\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"internalType\":\"struct Move[]\",\"name\":\"moves\",\"type\":\"tuple[]\"}],\"name\":\"encodeMoves\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"encodeWinner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"internalType\":\"struct Move[]\",\"name\":\"moves\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"mySig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"opponentSig\",\"type\":\"bytes\"}],\"name\":\"endGameWithMoves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"endGameWithTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"mySig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"opponentSig\",\"type\":\"bytes\"}],\"name\":\"endGameWithWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getEndGameWithTimeoutRequest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"internalType\":\"struct Move\",\"name\":\"move\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"initialState\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lastPlayer\",\"type\":\"address\"},{\"internalType\":\"address[3][3]\",\"name\":\"board\",\"type\":\"address[3][3]\"}],\"internalType\":\"struct TicTacToe.State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"internalType\":\"struct Move[]\",\"name\":\"moves\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"mySig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"opponentSig\",\"type\":\"bytes\"}],\"name\":\"requestGameEndWithTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"joined\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"creatorSig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"joinedSig\",\"type\":\"bytes\"}],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"unfinishedGameIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"internalType\":\"struct Move[]\",\"name\":\"moves\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"mySig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"opponentSig\",\"type\":\"bytes\"}],\"name\":\"validateMoves\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lastPlayer\",\"type\":\"address\"},{\"internalType\":\"address[3][3]\",\"name\":\"board\",\"type\":\"address[3][3]\"}],\"internalType\":\"struct TicTacToe.State\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"validateMsgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"me\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TicTacToe.sol\":\"TicTacToe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x828774372910d18e7337bc31a288d786748af4cd9da80222467e486ed1d569ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/TicTacToe.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.4;\\n\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n\\nstruct Game {\\n    address player0;\\n    address player1;\\n    address winner;\\n    uint8 result;\\n}\\n\\nstruct GameEndRequest {\\n    address requester;\\n    uint256 createdAt;\\n    uint8 kind;\\n    Move move;\\n    // Signature of all previous moves + move from this request.\\n    bytes signature;\\n}\\n\\nstruct Move {\\n    address player;\\n    uint256 i;\\n    uint256 j;\\n}\\n\\ncontract TicTacToe {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    error BadSignature(address signer);\\n\\n    mapping(uint256 => Game) public getGame;\\n    mapping(address => EnumerableSet.UintSet) private _unfinishedGameIds;\\n    mapping(address => uint256) public nonces;\\n\\n    mapping(uint256 => GameEndRequest) public getEndGameWithTimeoutRequest;\\n    // TODO: adjust this value\\n    // TODO: should this be configurable per game?\\n    uint256 public constant GAME_END_TIMEOUT = 1 hours;\\n    uint8 public constant REQUEST_CANCEL_END_GAME = 0;\\n    uint8 public constant REQUEST_END_GAME = 1;\\n\\n    uint8 public constant IN_PROGRESS = 0;\\n    uint8 public constant WON = 1;\\n    uint8 public constant DRAW = 2;\\n\\n    uint8 public constant SIZE = 3;\\n    struct State {\\n        address lastPlayer;\\n        address[SIZE][SIZE] board;\\n    }\\n\\n    modifier isInProgress(uint256 gameId) {\\n        require(getGame[gameId].result == IN_PROGRESS, \\\"game ended\\\");\\n        _;\\n    }\\n\\n    function startGame(address creator, address joined, bytes calldata creatorSig, bytes calldata joinedSig) external {\\n        require(creator != joined, \\\"same address\\\");\\n        uint256 gameId = calcGameId(creator);\\n        _verify(encodeGameStart(gameId, creator, joined), creator, creatorSig);\\n        _verify(encodeGameStart(gameId, creator, joined), joined, joinedSig);\\n        nonces[creator]++;\\n        _unfinishedGameIds[creator].add(gameId);\\n        _unfinishedGameIds[joined].add(gameId);\\n        getGame[gameId] = Game({\\n            player0: creator,\\n            player1: joined,\\n            result: IN_PROGRESS,\\n            winner: address(0)\\n        });\\n    }\\n\\n    function encodeGameStart(uint256 gameId, address creator, address joined) public pure returns (bytes32) {\\n        return keccak256(abi.encode(gameId, creator, joined));\\n    }\\n\\n    function calcGameId(address creator) public view returns (uint256) {\\n        return uint256(keccak256(abi.encode(block.chainid, address(this), creator, nonces[creator])));\\n    }\\n\\n    function unfinishedGameIds(address player) external view returns (uint256[] memory) {\\n        return _getEnumerableSetValues(_unfinishedGameIds[player]);\\n    }\\n\\n    function endGameWithWinner(\\n        uint256 gameId,\\n        uint8 result,\\n        address winner,\\n        bytes calldata mySig,\\n        bytes calldata opponentSig\\n    ) external isInProgress(gameId) {\\n        (address me, address opponent) = validateMsgSender(gameId);\\n        bytes32 hash = encodeWinner(gameId, result, winner);\\n        _verify(hash, me, mySig);\\n        _verify(hash, opponent, opponentSig);\\n        _endGame(gameId, result, winner);\\n    }\\n\\n    function encodeWinner(uint256 gameId, uint8 result, address winner) public pure returns (bytes32) {\\n        return keccak256(abi.encode(gameId, result, winner));\\n    }\\n\\n    function endGameWithMoves(\\n        uint256 gameId,\\n        Move[] calldata moves,\\n        bytes calldata mySig,\\n        bytes calldata opponentSig\\n    ) external isInProgress(gameId) {\\n        (, uint8 result, address winner) = validateMoves(gameId, moves, mySig, opponentSig);\\n        _endGame(gameId, result, winner);\\n    }\\n\\n    function validateMoves(\\n        uint256 gameId,\\n        Move[] calldata moves,\\n        bytes calldata mySig,\\n        bytes calldata opponentSig\\n    ) public view returns (State memory state, uint8 result, address winner) {\\n        (address me, address opponent) = validateMsgSender(gameId);\\n        _verifyMoves(gameId, moves, me, mySig);\\n        _verifyMoves(gameId, moves, opponent, opponentSig);\\n        state = initialState(gameId);\\n        for (uint256 i = 0; i < moves.length; i++) {\\n            doMove(state, moves[i]);\\n        }\\n        (result, winner) = checkWinners(state, moves.length, me, opponent);\\n    }\\n\\n    function encodeMoves(uint256 gameId, Move[] calldata moves) public pure returns (bytes32) {\\n        return keccak256(abi.encode(gameId, moves));\\n    }\\n\\n    function _verifyMoves(uint256 gameId, Move[] calldata moves, address signer, bytes calldata signature) private pure {\\n        // the last player must sign all moves; the second last player must sign `moves.length - 1` moves.\\n        uint256 offset = moves.length > 0 && moves[moves.length - 1].player != signer ? 1 : 0;\\n        Move[] calldata _moves = moves[0:moves.length - offset];\\n        // Do not verify empty moves because users do not make initial signatures\\n        if (_moves.length == 0) {\\n            return;\\n        }\\n        _verify(encodeMoves(gameId, _moves), signer, signature);\\n    }\\n\\n    function requestGameEndWithTimeout(\\n        uint256 gameId,\\n        Move[] calldata moves,\\n        bytes calldata mySig,\\n        bytes calldata opponentSig\\n    ) external isInProgress(gameId) {\\n        _makeGameEndWithTimeoutRequest(REQUEST_END_GAME, gameId, moves, mySig, opponentSig);\\n    }\\n\\n    function cancelGameEndWithTimeoutRequest(\\n        uint256 gameId,\\n        Move[] calldata moves,\\n        bytes calldata mySig,\\n        bytes calldata opponentSig\\n    ) external isInProgress(gameId) {\\n        _makeGameEndWithTimeoutRequest(REQUEST_CANCEL_END_GAME, gameId, moves, mySig, opponentSig);\\n    }\\n\\n    function _makeGameEndWithTimeoutRequest(\\n        uint8 kind,\\n        uint256 gameId,\\n        Move[] calldata moves,\\n        bytes calldata mySig,\\n        bytes calldata opponentSig\\n    ) private {\\n        (address me,) = validateMsgSender(gameId);\\n        require(moves.length > 1, \\\"!moves\\\");\\n        Move calldata lastMove = moves[moves.length - 1];\\n        require(lastMove.player == me, \\\"move not provided\\\");\\n        (, uint8 result,) = validateMoves(gameId, moves, mySig, opponentSig);\\n        require(result == IN_PROGRESS, \\\"!in progress\\\");\\n        getEndGameWithTimeoutRequest[gameId] = GameEndRequest({\\n            requester: me,\\n            kind: kind,\\n            createdAt: block.timestamp,\\n            move: lastMove,\\n            signature: mySig\\n        });\\n    }\\n\\n    function endGameWithTimeout(uint256 gameId) external isInProgress(gameId) {\\n        (address me,) = validateMsgSender(gameId);\\n        GameEndRequest storage request = getEndGameWithTimeoutRequest[gameId];\\n        require(request.kind == REQUEST_END_GAME, \\\"!requested\\\");\\n        require(request.requester == me, \\\"!requester\\\");\\n        require(block.timestamp > request.createdAt + GAME_END_TIMEOUT, \\\"!timed out\\\");\\n        _endGame(gameId, WON, me);\\n    }\\n\\n    function checkWinners(\\n        State memory state,\\n        uint256 movesLength,\\n        address me,\\n        address opponent\\n    ) public pure returns (uint8 result, address winner) {\\n        (result, winner) = (IN_PROGRESS, address(0));\\n        bool iWon = checkWinner(state.board, me);\\n        bool opponentWon = checkWinner(state.board, opponent);\\n        if (iWon) {\\n            require(!opponentWon, \\\"two winners\\\");\\n            return (WON, me);\\n        }\\n        if (opponentWon) {\\n            return (WON, opponent);\\n        }\\n        if (movesLength == SIZE * SIZE) {\\n            return (DRAW, address(0));\\n        }\\n        return (IN_PROGRESS, address(0));\\n    }\\n\\n    function _endGame(uint256 gameId, uint8 result, address winner) private {\\n        require(result == DRAW || result == WON, \\\"!end\\\");\\n        if (result == DRAW) {\\n            require(winner == address(0), \\\"!address(0)\\\");\\n        }\\n        Game storage game = getGame[gameId];\\n        game.result = result;\\n        game.winner = winner;\\n        _unfinishedGameIds[game.player0].remove(gameId);\\n        _unfinishedGameIds[game.player1].remove(gameId);\\n    }\\n\\n    function validateMsgSender(uint256 gameId) public view returns (address me, address opponent) {\\n        Game storage game = getGame[gameId];\\n        (address player0, address player1) = (game.player0, game.player1);\\n        if (player0 == msg.sender) {\\n            (me, opponent) = (player0, player1);\\n        } else {\\n            require(player1 == msg.sender, \\\"!player\\\");\\n            (me, opponent) = (player1, player0);\\n        }\\n    }\\n\\n    function _recover(bytes32 hash, bytes calldata signature) private pure returns (address) {\\n        return ECDSA.recover(ECDSA.toEthSignedMessageHash(hash), signature);\\n    }\\n\\n    function _verify(bytes32 hash, address signer, bytes calldata signature) private pure {\\n        if (_recover(hash, signature) != signer) {\\n            revert BadSignature(signer);\\n        }\\n    }\\n\\n    // GAME LOGIC\\n    function initialState(uint256 gameId) public view returns (State memory) {\\n        Game storage game = getGame[gameId];\\n        address[SIZE][SIZE] memory board;\\n        return State({\\n            lastPlayer: game.player1, // player0 should start\\n            board: board\\n        });\\n    }\\n\\n    function doMove(State memory state, Move calldata move) public pure returns (State memory) {\\n        require(state.board[move.i][move.j] == address(0), \\\"!empty\\\");\\n        require(move.player != state.lastPlayer, \\\"!turn\\\");\\n        state.board[move.i][move.j] = move.player;\\n        state.lastPlayer = move.player;\\n        return state;\\n    }\\n\\n    function checkWinner(address[SIZE][SIZE] memory board, address winner) public pure returns (bool) {\\n        // Check verticals\\n        for (uint256 i = 0; i < SIZE; i++) {\\n            uint256 sum = 0;\\n            for (uint256 j = 0; j < SIZE; j++) {\\n                if (board[i][j] == winner) {\\n                    sum += 1;\\n                }\\n            }\\n            if (sum == SIZE) {\\n                return true;\\n            }\\n        }\\n\\n        // Check horizontals\\n        for (uint256 j = 0; j < SIZE; j++) {\\n            uint256 sum = 0;\\n            for (uint256 i = 0; i < SIZE; i++) {\\n                if (board[i][j] == winner) {\\n                    sum += 1;\\n                }\\n            }\\n            if (sum == SIZE) {\\n                return true;\\n            }\\n        }\\n\\n        // Check diagonals\\n        {\\n            uint256 sum = 0;\\n            for (uint256 i = 0; i < SIZE; i++) {\\n                if (board[i][i] == winner) {\\n                    sum += 1;\\n                }\\n            }\\n            if (sum == SIZE) {\\n                return true;\\n            }\\n        }\\n        {\\n            uint256 sum = 0;\\n            for (uint256 i = 0; i < SIZE; i++) {\\n                if (board[SIZE - i - 1][i] == winner) {\\n                    sum += 1;\\n                }\\n            }\\n            if (sum == SIZE) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    // TODO: remove when https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2825 is fixed\\n    function _getEnumerableSetValues(EnumerableSet.UintSet storage set) private view returns(uint256[] memory) {\\n        bytes32[] memory store = set._inner._values;\\n        uint256[] memory result;\\n        assembly {\\n            result := store\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x7cad968ae293bbb093f5600a5738f7a167a2f4c753b653ca0186080cf61ed550\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80637ecebe00116100f9578063aa33cf2011610097578063c952965b11610071578063c952965b146103ed578063dc1140ad14610411578063e035e53d14610434578063fd1563451461046757600080fd5b8063aa33cf20146103b0578063b39c6952146103c3578063bdffd282146103e557600080fd5b80639b8a8ab0116100d35780639b8a8ab014610306578063a2f77bcc14610319578063a4fa2f2714610394578063a99dfa5c146103a757600080fd5b80637ecebe00146102b35780638e19e59e146102d35780639217a926146102f357600080fd5b80634822144e1161016657806361de6e1c1161014057806361de6e1c1461027857806366467b9a1461028b578063710c1025146102ab57806379c29403146102ab57600080fd5b80634822144e1461023c578063600f150c146101d4578063619d36ef1461027057600080fd5b8063025a506a146101ae57806302bb7487146101d45780630d7876b6146101ee57806311afc10c1461020357806323380748146102165780632d6c2dc714610229575b600080fd5b6101c16101bc366004611fff565b61047a565b6040519081526020015b60405180910390f35b6101dc600081565b60405160ff90911681526020016101cb565b6102016101fc366004612084565b6104ca565b005b610201610211366004612084565b610529565b610201610224366004612148565b610575565b6101c1610237366004611e18565b6105ff565b61024f61024a366004611f96565b61066b565b6040805160ff90931683526001600160a01b039091166020830152016101cb565b6101dc600281565b6101c1610286366004612124565b610730565b61029e610299366004611e18565b610760565b6040516101cb91906122bc565b6101dc600181565b6101c16102c1366004611e18565b60026020526000908152604090205481565b6102e66102e1366004611f55565b61078a565b6040516101cb9190612318565b610201610301366004612084565b61090f565b6101c161031436600461203a565b610978565b610361610327366004611fe7565b6000602081905290815260409020805460018201546002909201546001600160a01b0391821692821691811690600160a01b900460ff1684565b604080516001600160a01b0395861681529385166020850152919093169082015260ff90911660608201526080016101cb565b6102016103a2366004611e32565b61098f565b6101c1610e1081565b6102016103be366004611fe7565b610b20565b6103d66103d1366004612084565b610c65565b6040516101cb93929190612327565b6101dc600381565b6104006103fb366004611fe7565b610d16565b6040516101cb959493929190612225565b61042461041f366004611ec0565b610e08565b60405190151581526020016101cb565b610447610442366004611fe7565b6110f8565b604080516001600160a01b039384168152929091166020830152016101cb565b6102e6610475366004611fe7565b611182565b60008383836040516020016104ab939291909283526001600160a01b03918216602084015216604082015260600190565b6040516020818303038152906040528051906020012090509392505050565b6000878152602081905260409020600201548790600160a01b900460ff161561050e5760405162461bcd60e51b8152600401610505906122f4565b60405180910390fd5b61051f6001898989898989896111c6565b5050505050505050565b6000878152602081905260409020600201548790600160a01b900460ff16156105645760405162461bcd60e51b8152600401610505906122f4565b61051f6000898989898989896111c6565b6000878152602081905260409020600201548790600160a01b900460ff16156105b05760405162461bcd60e51b8152600401610505906122f4565b6000806105bc8a6110f8565b9150915060006105cd8b8b8b610730565b90506105db81848a8a611417565b6105e781838888611417565b6105f28b8b8b61145e565b5050505050505050505050565b6001600160a01b038116600090815260026020908152604080832054905161064d92469230928792019384526001600160a01b03928316602085015291166040830152606082015260800190565b60408051601f19818403018152919052805160209091012092915050565b6020840151600090819081906106819086610e08565b90506000610693886020015186610e08565b905081156106e55780156106d75760405162461bcd60e51b815260206004820152600b60248201526a74776f2077696e6e65727360a81b6044820152606401610505565b600186935093505050610727565b80156106f957600185935093505050610727565b610704600380612431565b60ff1687141561071d5760026000935093505050610727565b6000809350935050505b94509492505050565b604080516020810185905260ff8416918101919091526001600160a01b03821660608201526000906080016104ab565b6001600160a01b038116600090815260016020526040902060609061078490611586565b92915050565b610792611b48565b602080840151600091840135600381106107bc57634e487b7160e01b600052603260045260246000fd5b60200201518360400135600381106107e457634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b0316146108285760405162461bcd60e51b815260206004820152600660248201526521656d70747960d01b6044820152606401610505565b82516001600160a01b03166108406020840184611e18565b6001600160a01b0316141561087f5760405162461bcd60e51b815260206004820152600560248201526410ba3ab93760d91b6044820152606401610505565b61088c6020830183611e18565b83602001518360200135600381106108b457634e487b7160e01b600052603260045260246000fd5b60200201518360400135600381106108dc57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101526108fd90830183611e18565b6001600160a01b031683525090919050565b6000878152602081905260409020600201548790600160a01b900460ff161561094a5760405162461bcd60e51b8152600401610505906122f4565b60008061095c8a8a8a8a8a8a8a610c65565b925092505061096c8a838361145e565b50505050505050505050565b60008383836040516020016104ab9392919061235a565b846001600160a01b0316866001600160a01b031614156109e05760405162461bcd60e51b815260206004820152600c60248201526b73616d65206164647265737360a01b6044820152606401610505565b60006109eb876105ff565b9050610a036109fb82898961047a565b888787611417565b610a19610a1182898961047a565b878585611417565b6001600160a01b0387166000908152600260205260408120805491610a3d836124ac565b90915550506001600160a01b0387166000908152600160205260409020610a6490826115e0565b506001600160a01b0386166000908152600160205260409020610a8790826115e0565b50604080516080810182526001600160a01b0398891681529688166020808901918252600089840181815260608b01828152958252918190529290922097518854908a166001600160a01b03199182161789559051600189018054918b16919092161790555160029096018054915160ff16600160a01b026001600160a81b031990921696909716959095179490941790945550505050565b6000818152602081905260409020600201548190600160a01b900460ff1615610b5b5760405162461bcd60e51b8152600401610505906122f4565b6000610b66836110f8565b50600084815260036020526040902060028101549192509060ff16600114610bbd5760405162461bcd60e51b815260206004820152600a602482015269085c995c5d595cdd195960b21b6044820152606401610505565b80546001600160a01b03838116911614610c065760405162461bcd60e51b815260206004820152600a60248201526910b932b8bab2b9ba32b960b11b6044820152606401610505565b610e108160010154610c189190612419565b4211610c535760405162461bcd60e51b815260206004820152600a602482015269085d1a5b5959081bdd5d60b21b6044820152606401610505565b610c5f8460018461145e565b50505050565b610c6d611b48565b600080600080610c7c8c6110f8565b91509150610c8e8c8c8c858d8d6115f3565b610c9c8c8c8c848b8b6115f3565b610ca58c611182565b945060005b8a811015610cf457610ce1868d8d84818110610cd657634e487b7160e01b600052603260045260246000fd5b90506060020161078a565b5080610cec816124ac565b915050610caa565b50610d01858b848461066b565b959d909c50949a509398505050505050505050565b6003602081815260009283526040928390208054600182015460028301548651606081018852958401546001600160a01b0390811687526004850154958701959095526005840154968601969096526006830180549490921695909460ff9091169390929190610d8590612471565b80601f0160208091040260200160405190810160405280929190818152602001828054610db190612471565b8015610dfe5780601f10610dd357610100808354040283529160200191610dfe565b820191906000526020600020905b815481529060010190602001808311610de157829003601f168201915b5050505050905085565b6000805b6003811015610ecc576000805b6003811015610ea457846001600160a01b0316868460038110610e4c57634e487b7160e01b600052603260045260246000fd5b60200201518260038110610e7057634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b03161415610e9257610e8f600183612419565b91505b80610e9c816124ac565b915050610e19565b506003811415610eb957600192505050610784565b5080610ec4816124ac565b915050610e0c565b5060005b6003811015610f90576000805b6003811015610f6857846001600160a01b0316868260038110610f1057634e487b7160e01b600052603260045260246000fd5b60200201518460038110610f3457634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b03161415610f5657610f53600183612419565b91505b80610f60816124ac565b915050610edd565b506003811415610f7d57600192505050610784565b5080610f88816124ac565b915050610ed0565b506000805b600381101561102057836001600160a01b0316858260038110610fc857634e487b7160e01b600052603260045260246000fd5b60200201518260038110610fec57634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b0316141561100e5761100b600183612419565b91505b80611018816124ac565b915050610f95565b506003811415611034576001915050610784565b506000805b60038110156110da576001600160a01b03841685600161105a84600361245a565b611064919061245a565b6003811061108257634e487b7160e01b600052603260045260246000fd5b602002015182600381106110a657634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b031614156110c8576110c5600183612419565b91505b806110d2816124ac565b915050611039565b5060038114156110ee576001915050610784565b5060009392505050565b6000818152602081905260408120805460018201548392916001600160a01b03908116911633821415611131579093509150828261117a565b6001600160a01b03811633146111735760405162461bcd60e51b815260206004820152600760248201526610b83630bcb2b960c91b6044820152606401610505565b9350915081835b505050915091565b61118a611b48565b60008281526020819052604090206111a0611b70565b604080518082019091526001909201546001600160a01b03168252602082015292915050565b60006111d1886110f8565b5090506001861161120d5760405162461bcd60e51b8152602060048201526006602482015265216d6f76657360d01b6044820152606401610505565b36878761121b60018261245a565b81811061123857634e487b7160e01b600052603260045260246000fd5b606002919091019150506001600160a01b0382166112596020830183611e18565b6001600160a01b0316146112a35760405162461bcd60e51b81526020600482015260116024820152701b5bdd99481b9bdd081c1c9bdd9a591959607a1b6044820152606401610505565b60006112b48a8a8a8a8a8a8a610c65565b5091505060ff8116156112f85760405162461bcd60e51b815260206004820152600c60248201526b21696e2070726f677265737360a01b6044820152606401610505565b6040518060a00160405280846001600160a01b031681526020014281526020018c60ff168152602001838036038101906113329190611ef5565b815260200188888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250508c815260036020818152604092839020855181546001600160a01b03199081166001600160a01b039283161783558784015160018401558786015160028401805460ff191660ff90921691909117905560608801518051958401805490921695909216949094179093558282015160048201559190920151600582015560808401518051919350611407926006850192910190611b9d565b5050505050505050505050505050565b826001600160a01b031661142c8584846116b9565b6001600160a01b031614610c5f57604051639a7d38d960e01b81526001600160a01b0384166004820152602401610505565b60ff821660021480611473575060ff82166001145b6114a85760405162461bcd60e51b81526004016105059060208082526004908201526308595b9960e21b604082015260600190565b60ff8216600214156114f9576001600160a01b038116156114f95760405162461bcd60e51b815260206004820152600b60248201526a216164647265737328302960a81b6044820152606401610505565b6000838152602081815260408083206002810180546001600160a81b031916600160a01b60ff8916026001600160a01b031916176001600160a01b0387811691909117909155815416845260019092529091206115569085611759565b506001818101546001600160a01b031660009081526020919091526040902061157f9085611759565b5050505050565b8054604080516020808402820181019092528281526060926000928591908301828280156115d357602002820191906000526020600020905b8154815260200190600101908083116115bf575b5093979650505050505050565b60006115ec8383611765565b9392505050565b6000841580159061165557506001600160a01b038416868661161660018261245a565b81811061163357634e487b7160e01b600052603260045260246000fd5b6116499260206060909202019081019150611e18565b6001600160a01b031614155b611660576000611663565b60015b60ff169050366000878188611678868261245a565b92611685939291906123ee565b909250905080611697575050506116b1565b6116ad6116a58a8484610978565b878787611417565b5050505b505050505050565b6000611751611715856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506117b492505050565b949350505050565b60006115ec8383611858565b60008181526001830160205260408120546117ac57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610784565b506000610784565b60008151604114156117e85760208201516040830151606084015160001a6117de86828585611975565b9350505050610784565b8151604014156118105760208201516040830151611807858383611b1e565b92505050610784565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610505565b6000818152600183016020526040812054801561196b57600061187c60018361245a565b85549091506000906118909060019061245a565b90508181146119115760008660000182815481106118be57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106118ef57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061193057634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610784565b6000915050610784565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156119f25760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610505565b8360ff16601b1480611a0757508360ff16601c145b611a5e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610505565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015611ab2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611b155760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610505565b95945050505050565b60006001600160ff1b03821660ff83901c601b01611b3e86828785611975565b9695505050505050565b604051806040016040528060006001600160a01b03168152602001611b6b611b70565b905290565b60405180606001604052806003905b611b87611c21565b815260200190600190039081611b7f5790505090565b828054611ba990612471565b90600052602060002090601f016020900481019282611bcb5760008555611c11565b82601f10611be457805160ff1916838001178555611c11565b82800160010185558215611c11579182015b82811115611c11578251825591602001919060010190611bf6565b50611c1d929150611c3f565b5090565b60405180606001604052806003906020820280368337509192915050565b5b80821115611c1d5760008155600101611c40565b80356001600160a01b0381168114611c6b57600080fd5b919050565b6000601f8381840112611c81578182fd5b611c896123c5565b80848661012087011115611c9b578485fd5b845b6003808210611cac5750611d12565b8886840112611cb9578687fd5b611cc16123c5565b8084606086018c811115611cd3578a8bfd5b8a5b85811015611cfb57611ce683611c54565b85526020948501949290920191600101611cd5565b509188525060209096019593505050600101611c9d565b50909695505050505050565b60008083601f840112611d2f578182fd5b50813567ffffffffffffffff811115611d46578182fd5b602083019150836020606083028501011115611d6157600080fd5b9250929050565b60008083601f840112611d79578182fd5b50813567ffffffffffffffff811115611d90578182fd5b602083019150836020828501011115611d6157600080fd5b60006101408284031215611dba578081fd5b6040516040810181811067ffffffffffffffff82111715611ddd57611ddd6124dd565b604052905080611dec83611c54565b8152611dfb8460208501611c70565b60208201525092915050565b803560ff81168114611c6b57600080fd5b600060208284031215611e29578081fd5b6115ec82611c54565b60008060008060008060808789031215611e4a578182fd5b611e5387611c54565b9550611e6160208801611c54565b9450604087013567ffffffffffffffff80821115611e7d578384fd5b611e898a838b01611d68565b90965094506060890135915080821115611ea1578384fd5b50611eae89828a01611d68565b979a9699509497509295939492505050565b6000806101408385031215611ed3578182fd5b611edd8484611c70565b9150611eec6101208401611c54565b90509250929050565b600060608284031215611f06578081fd5b6040516060810181811067ffffffffffffffff82111715611f2957611f296124dd565b604052611f3583611c54565b815260208301356020820152604083013560408201528091505092915050565b6000808284036101a0811215611f69578283fd5b611f738585611da8565b9250606061013f1982011215611f87578182fd5b50610140830190509250929050565b6000806000806101a08587031215611fac578384fd5b611fb68686611da8565b93506101408501359250611fcd6101608601611c54565b9150611fdc6101808601611c54565b905092959194509250565b600060208284031215611ff8578081fd5b5035919050565b600080600060608486031215612013578283fd5b8335925061202360208501611c54565b915061203160408501611c54565b90509250925092565b60008060006040848603121561204e578283fd5b83359250602084013567ffffffffffffffff81111561206b578283fd5b61207786828701611d1e565b9497909650939450505050565b60008060008060008060006080888a03121561209e578485fd5b87359650602088013567ffffffffffffffff808211156120bc578687fd5b6120c88b838c01611d1e565b909850965060408a01359150808211156120e0578283fd5b6120ec8b838c01611d68565b909650945060608a0135915080821115612104578283fd5b506121118a828b01611d68565b989b979a50959850939692959293505050565b600080600060608486031215612138578081fd5b8335925061202360208501611e07565b600080600080600080600060a0888a031215612162578081fd5b8735965061217260208901611e07565b955061218060408901611c54565b9450606088013567ffffffffffffffff8082111561219c578283fd5b6121a88b838c01611d68565b909650945060808a0135915080821115612104578283fd5b80516001600160a01b0390811683526020808301518185016000805b60038082106121eb575061051f565b845184845b8381101561220e5782518a16825291880191908801906001016121f0565b5050509385019350606092909201916001016121dc565b600060018060a01b0380881683526020878185015260ff87166040850152818651166060850152808601516080850152604086015160a085015260e060c0850152845191508160e0850152825b8281101561228f5785810182015185820161010001528101612272565b828111156122a1578361010084870101525b5050601f01601f191691909101610100019695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611d12578351835292840192918401916001016122d8565b6020808252600a908201526919d85b5948195b99195960b21b604082015260600190565b610140810161078482846121c0565b610180810161233682866121c0565b60ff939093166101408201526001600160a01b039190911661016090910152919050565b838152604060208083018290528282018490526000919060609081850187855b888110156123b6576001600160a01b0361239383611c54565b16835281840135848401528582013586840152918401919084019060010161237a565b50909998505050505050505050565b6040516060810167ffffffffffffffff811182821017156123e8576123e86124dd565b60405290565b600080858511156123fd578182fd5b83861115612409578182fd5b5050606083020193919092039150565b6000821982111561242c5761242c6124c7565b500190565b600060ff821660ff84168160ff0481118215151615612452576124526124c7565b029392505050565b60008282101561246c5761246c6124c7565b500390565b600181811c9082168061248557607f821691505b602082108114156124a657634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156124c0576124c06124c7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212206c697129a6f18072a463f62be494bd432dd64212457362b12640a646ef2bbeac64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 738,
        "contract": "contracts/TicTacToe.sol:TicTacToe",
        "label": "getGame",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Game)706_storage)"
      },
      {
        "astId": 743,
        "contract": "contracts/TicTacToe.sol:TicTacToe",
        "label": "_unfinishedGameIds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(UintSet)591_storage)"
      },
      {
        "astId": 747,
        "contract": "contracts/TicTacToe.sol:TicTacToe",
        "label": "nonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 752,
        "contract": "contracts/TicTacToe.sol:TicTacToe",
        "label": "getEndGameWithTimeoutRequest",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(GameEndRequest)718_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UintSet)591_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)591_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Game)706_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)706_storage"
      },
      "t_mapping(t_uint256,t_struct(GameEndRequest)718_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GameEndRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(GameEndRequest)718_storage"
      },
      "t_struct(Game)706_storage": {
        "encoding": "inplace",
        "label": "struct Game",
        "members": [
          {
            "astId": 699,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "player0",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 701,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "player1",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 703,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "winner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 705,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "result",
            "offset": 20,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(GameEndRequest)718_storage": {
        "encoding": "inplace",
        "label": "struct GameEndRequest",
        "members": [
          {
            "astId": 708,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "requester",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 710,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "createdAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 712,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "kind",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 715,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "move",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Move)725_storage"
          },
          {
            "astId": 717,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "signature",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Move)725_storage": {
        "encoding": "inplace",
        "label": "struct Move",
        "members": [
          {
            "astId": 720,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "player",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 722,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "i",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 724,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "j",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)193_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 188,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 192,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)591_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 590,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)193_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}