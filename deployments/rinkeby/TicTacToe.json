{
  "address": "0x075b3e8DBA68dbd97643F6A6AeDa67E2184DFFA9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "BadSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DRAW",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAME_END_TIMEOUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IN_PROGRESS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_CANCEL_END_GAME",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_END_GAME",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIZE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WON",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "calcGameId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "j",
              "type": "uint256"
            }
          ],
          "internalType": "struct Move[]",
          "name": "moves",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "mySig",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "opponentSig",
          "type": "bytes"
        }
      ],
      "name": "cancelGameEndWithTimeoutRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[3][3]",
          "name": "board",
          "type": "address[3][3]"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "checkWinner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lastPlayer",
              "type": "address"
            },
            {
              "internalType": "address[3][3]",
              "name": "board",
              "type": "address[3][3]"
            }
          ],
          "internalType": "struct TicTacToe.State",
          "name": "state",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "movesLength",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "me",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "opponent",
          "type": "address"
        }
      ],
      "name": "checkWinners",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "result",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lastPlayer",
              "type": "address"
            },
            {
              "internalType": "address[3][3]",
              "name": "board",
              "type": "address[3][3]"
            }
          ],
          "internalType": "struct TicTacToe.State",
          "name": "state",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "j",
              "type": "uint256"
            }
          ],
          "internalType": "struct Move",
          "name": "move",
          "type": "tuple"
        }
      ],
      "name": "doMove",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lastPlayer",
              "type": "address"
            },
            {
              "internalType": "address[3][3]",
              "name": "board",
              "type": "address[3][3]"
            }
          ],
          "internalType": "struct TicTacToe.State",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "joined",
          "type": "address"
        }
      ],
      "name": "encodeGameStart",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "j",
              "type": "uint256"
            }
          ],
          "internalType": "struct Move[]",
          "name": "moves",
          "type": "tuple[]"
        }
      ],
      "name": "encodeMoves",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "result",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "encodeWinner",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "j",
              "type": "uint256"
            }
          ],
          "internalType": "struct Move[]",
          "name": "moves",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "mySig",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "opponentSig",
          "type": "bytes"
        }
      ],
      "name": "endGameWithMoves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "endGameWithTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "result",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "mySig",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "opponentSig",
          "type": "bytes"
        }
      ],
      "name": "endGameWithWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getEndGameWithTimeoutRequest",
      "outputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "kind",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "j",
              "type": "uint256"
            }
          ],
          "internalType": "struct Move",
          "name": "move",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getGame",
      "outputs": [
        {
          "internalType": "address",
          "name": "player0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "result",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getGameId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "initialState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lastPlayer",
              "type": "address"
            },
            {
              "internalType": "address[3][3]",
              "name": "board",
              "type": "address[3][3]"
            }
          ],
          "internalType": "struct TicTacToe.State",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "j",
              "type": "uint256"
            }
          ],
          "internalType": "struct Move[]",
          "name": "moves",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "mySig",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "opponentSig",
          "type": "bytes"
        }
      ],
      "name": "requestGameEndWithTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "joined",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "creatorSig",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "joinedSig",
          "type": "bytes"
        }
      ],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "j",
              "type": "uint256"
            }
          ],
          "internalType": "struct Move[]",
          "name": "moves",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "mySig",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "opponentSig",
          "type": "bytes"
        }
      ],
      "name": "validateMoves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lastPlayer",
              "type": "address"
            },
            {
              "internalType": "address[3][3]",
              "name": "board",
              "type": "address[3][3]"
            }
          ],
          "internalType": "struct TicTacToe.State",
          "name": "state",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "result",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3da617e03a1ee9de05fa0c8ac2f50c6351535ab417c294efb0d18cbf0894bf7d",
  "receipt": {
    "to": null,
    "from": "0xc28Bf645b0ae0605747283A80553d54201D31544",
    "contractAddress": "0x075b3e8DBA68dbd97643F6A6AeDa67E2184DFFA9",
    "transactionIndex": 13,
    "gasUsed": "1993931",
    "logsBloom": "0x
    "blockHash": "0x61db947223e8b9707d26a4abe0d0b03a7c895f4c8cf77f51022ccaffd2eb83d4",
    "transactionHash": "0x3da617e03a1ee9de05fa0c8ac2f50c6351535ab417c294efb0d18cbf0894bf7d",
    "logs": [],
    "blockNumber": 9123089,
    "cumulativeGasUsed": "4031946",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c84f4f1919c8a8a79bac46b71c88b0cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"BadSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DRAW\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAME_END_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IN_PROGRESS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_CANCEL_END_GAME\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_END_GAME\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIZE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WON\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"calcGameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"internalType\":\"struct Move[]\",\"name\":\"moves\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"mySig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"opponentSig\",\"type\":\"bytes\"}],\"name\":\"cancelGameEndWithTimeoutRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[3][3]\",\"name\":\"board\",\"type\":\"address[3][3]\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"checkWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lastPlayer\",\"type\":\"address\"},{\"internalType\":\"address[3][3]\",\"name\":\"board\",\"type\":\"address[3][3]\"}],\"internalType\":\"struct TicTacToe.State\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"movesLength\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"me\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"}],\"name\":\"checkWinners\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lastPlayer\",\"type\":\"address\"},{\"internalType\":\"address[3][3]\",\"name\":\"board\",\"type\":\"address[3][3]\"}],\"internalType\":\"struct TicTacToe.State\",\"name\":\"state\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"internalType\":\"struct Move\",\"name\":\"move\",\"type\":\"tuple\"}],\"name\":\"doMove\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lastPlayer\",\"type\":\"address\"},{\"internalType\":\"address[3][3]\",\"name\":\"board\",\"type\":\"address[3][3]\"}],\"internalType\":\"struct TicTacToe.State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"joined\",\"type\":\"address\"}],\"name\":\"encodeGameStart\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"internalType\":\"struct Move[]\",\"name\":\"moves\",\"type\":\"tuple[]\"}],\"name\":\"encodeMoves\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"encodeWinner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"internalType\":\"struct Move[]\",\"name\":\"moves\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"mySig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"opponentSig\",\"type\":\"bytes\"}],\"name\":\"endGameWithMoves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"endGameWithTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"mySig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"opponentSig\",\"type\":\"bytes\"}],\"name\":\"endGameWithWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getEndGameWithTimeoutRequest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"internalType\":\"struct Move\",\"name\":\"move\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getGameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"initialState\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lastPlayer\",\"type\":\"address\"},{\"internalType\":\"address[3][3]\",\"name\":\"board\",\"type\":\"address[3][3]\"}],\"internalType\":\"struct TicTacToe.State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"internalType\":\"struct Move[]\",\"name\":\"moves\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"mySig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"opponentSig\",\"type\":\"bytes\"}],\"name\":\"requestGameEndWithTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"joined\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"creatorSig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"joinedSig\",\"type\":\"bytes\"}],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"internalType\":\"struct Move[]\",\"name\":\"moves\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"mySig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"opponentSig\",\"type\":\"bytes\"}],\"name\":\"validateMoves\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lastPlayer\",\"type\":\"address\"},{\"internalType\":\"address[3][3]\",\"name\":\"board\",\"type\":\"address[3][3]\"}],\"internalType\":\"struct TicTacToe.State\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TicTacToe.sol\":\"TicTacToe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x828774372910d18e7337bc31a288d786748af4cd9da80222467e486ed1d569ab\",\"license\":\"MIT\"},\"contracts/TicTacToe.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.4;\\n\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n\\nstruct Game {\\n    address player0;\\n    address player1;\\n    address winner;\\n    uint8 result;\\n}\\n\\nstruct GameEndRequest {\\n    address requester;\\n    uint256 createdAt;\\n    uint8 kind;\\n    Move move;\\n    // Signature of all previous moves + move from this request.\\n    bytes signature;\\n}\\n\\nstruct Move {\\n    address player;\\n    uint256 i;\\n    uint256 j;\\n}\\n\\ncontract TicTacToe {\\n    error BadSignature(address signer);\\n\\n    mapping(uint256 => Game) public getGame;\\n    mapping(address => uint256) public getGameId;\\n    mapping(address => uint256) public nonces;\\n\\n    mapping(uint256 => GameEndRequest) public getEndGameWithTimeoutRequest;\\n    // TODO: adjust this value\\n    // TODO: should this be configurable per game?\\n    uint256 public constant GAME_END_TIMEOUT = 1 hours;\\n    uint8 public constant REQUEST_CANCEL_END_GAME = 0;\\n    uint8 public constant REQUEST_END_GAME = 1;\\n\\n    uint8 public constant IN_PROGRESS = 0;\\n    uint8 public constant WON = 1;\\n    uint8 public constant DRAW = 2;\\n\\n    uint8 public constant SIZE = 3;\\n    struct State {\\n        address lastPlayer;\\n        address[SIZE][SIZE] board;\\n    }\\n\\n    modifier isInProgress(uint256 gameId) {\\n        require(getGame[gameId].result == IN_PROGRESS, \\\"game ended\\\");\\n        _;\\n    }\\n\\n    function startGame(address creator, address joined, bytes calldata creatorSig, bytes calldata joinedSig) external {\\n        require(creator != joined, \\\"same address\\\");\\n        require(getGameId[creator] == 0, \\\"already playing\\\");\\n        require(getGameId[joined] == 0, \\\"already playing\\\");\\n        uint256 gameId = calcGameId(creator);\\n        // TODO: should we include `joined` in `creatorSig`?\\n        _verify(encodeGameStart(gameId, creator, address(0)), creator, creatorSig);\\n        _verify(encodeGameStart(gameId, creator, joined), joined, joinedSig);\\n        nonces[creator]++;\\n        getGameId[creator] = gameId;\\n        getGameId[joined] = gameId;\\n        getGame[gameId] = Game({\\n            player0: creator,\\n            player1: joined,\\n            result: IN_PROGRESS,\\n            winner: address(0)\\n        });\\n    }\\n\\n    function encodeGameStart(uint256 gameId, address creator, address joined) public pure returns (bytes32) {\\n        return keccak256(abi.encode(gameId, creator, joined));\\n    }\\n\\n    function calcGameId(address creator) public view returns (uint256) {\\n        return uint256(keccak256(abi.encode(block.chainid, address(this), creator, nonces[creator])));\\n    }\\n\\n    function endGameWithWinner(\\n        uint256 gameId,\\n        uint8 result,\\n        address winner,\\n        bytes calldata mySig,\\n        bytes calldata opponentSig\\n    ) external isInProgress(gameId) {\\n        Game storage game = getGame[gameId];\\n        (address me, address opponent) = _validateMsgSender(game);\\n        bytes32 hash = encodeWinner(gameId, result, winner);\\n        _verify(hash, me, mySig);\\n        _verify(hash, opponent, opponentSig);\\n        _endGame(game, result, winner);\\n    }\\n\\n    function encodeWinner(uint256 gameId, uint8 result, address winner) public pure returns (bytes32) {\\n        return keccak256(abi.encode(gameId, result, winner));\\n    }\\n\\n    function endGameWithMoves(\\n        uint256 gameId,\\n        Move[] calldata moves,\\n        bytes calldata mySig,\\n        bytes calldata opponentSig\\n    ) external isInProgress(gameId) {\\n        (, uint8 result, address winner) = validateMoves(gameId, moves, mySig, opponentSig);\\n        _endGame(getGame[gameId], result, winner);\\n    }\\n\\n    function validateMoves(\\n        uint256 gameId,\\n        Move[] calldata moves,\\n        bytes calldata mySig,\\n        bytes calldata opponentSig\\n    ) public view returns (State memory state, uint8 result, address winner) {\\n        (address me, address opponent) = _validateMsgSender(getGame[gameId]);\\n        _verifyMoves(gameId, moves, me, mySig);\\n        _verifyMoves(gameId, moves, opponent, opponentSig);\\n        state = initialState(gameId);\\n        for (uint256 i = 0; i < moves.length; i++) {\\n            doMove(state, moves[i]);\\n        }\\n        (result, winner) = checkWinners(state, moves.length, me, opponent);\\n    }\\n\\n    function encodeMoves(uint256 gameId, Move[] calldata moves) public pure returns (bytes32) {\\n        return keccak256(abi.encode(gameId, moves));\\n    }\\n\\n    function _verifyMoves(uint256 gameId, Move[] calldata moves, address signer, bytes calldata signature) private pure {\\n        // the last player must sign all moves; the second last player must sign `moves.length - 1` moves.\\n        uint256 offset = moves.length > 0 && moves[moves.length - 1].player != signer ? 1 : 0;\\n        _verify(encodeMoves(gameId, moves[0:moves.length - offset]), signer, signature);\\n    }\\n\\n    function requestGameEndWithTimeout(\\n        uint256 gameId,\\n        Move[] calldata moves,\\n        bytes calldata mySig,\\n        bytes calldata opponentSig\\n    ) external isInProgress(gameId) {\\n        _makeGameEndWithTimeoutRequest(REQUEST_END_GAME, gameId, moves, mySig, opponentSig);\\n    }\\n\\n    function cancelGameEndWithTimeoutRequest(\\n        uint256 gameId,\\n        Move[] calldata moves,\\n        bytes calldata mySig,\\n        bytes calldata opponentSig\\n    ) external isInProgress(gameId) {\\n        _makeGameEndWithTimeoutRequest(REQUEST_CANCEL_END_GAME, gameId, moves, mySig, opponentSig);\\n    }\\n\\n    function _makeGameEndWithTimeoutRequest(\\n        uint8 kind,\\n        uint256 gameId,\\n        Move[] calldata moves,\\n        bytes calldata mySig,\\n        bytes calldata opponentSig\\n    ) private {\\n        (address me,) = _validateMsgSender(getGame[gameId]);\\n        require(moves.length > 1, \\\"!moves\\\");\\n        Move calldata lastMove = moves[moves.length - 1];\\n        require(lastMove.player == me, \\\"move not provided\\\");\\n        (, uint8 result,) = validateMoves(gameId, moves, mySig, opponentSig);\\n        require(result == IN_PROGRESS, \\\"!in progress\\\");\\n        getEndGameWithTimeoutRequest[gameId] = GameEndRequest({\\n            requester: me,\\n            kind: kind,\\n            createdAt: block.timestamp,\\n            move: lastMove,\\n            signature: mySig\\n        });\\n    }\\n\\n    function endGameWithTimeout(uint256 gameId) external isInProgress(gameId) {\\n        Game storage game = getGame[gameId];\\n        (address me,) = _validateMsgSender(game);\\n        GameEndRequest storage request = getEndGameWithTimeoutRequest[gameId];\\n        require(request.kind == REQUEST_END_GAME, \\\"!requested\\\");\\n        require(request.requester == me, \\\"!requester\\\");\\n        require(block.timestamp > request.createdAt + GAME_END_TIMEOUT, \\\"!timed out\\\");\\n        _endGame(game, WON, me);\\n    }\\n\\n    function checkWinners(\\n        State memory state,\\n        uint256 movesLength,\\n        address me,\\n        address opponent\\n    ) public pure returns (uint8 result, address winner) {\\n        (result, winner) = (IN_PROGRESS, address(0));\\n        bool iWon = checkWinner(state.board, me);\\n        bool opponentWon = checkWinner(state.board, opponent);\\n        if (iWon) {\\n            require(!opponentWon, \\\"two winners\\\");\\n            return (WON, me);\\n        }\\n        if (opponentWon) {\\n            return (WON, opponent);\\n        }\\n        if (movesLength == SIZE * SIZE) {\\n            return (DRAW, address(0));\\n        }\\n        return (IN_PROGRESS, address(0));\\n    }\\n\\n    function _endGame(Game storage game, uint8 result, address winner) private {\\n        require(result == DRAW || result == WON, \\\"!end\\\");\\n        if (result == DRAW) {\\n            require(winner == address(0), \\\"!address(0)\\\");\\n        }\\n        game.result = result;\\n        game.winner = winner;\\n        getGameId[game.player0] = 0;\\n        getGameId[game.player1] = 0;\\n    }\\n\\n    function _validateMsgSender(Game storage game) private view returns (address me, address opponent) {\\n        (address player0, address player1) = (game.player0, game.player1);\\n        if (player0 == msg.sender) {\\n            (me, opponent) = (player0, player1);\\n        } else {\\n            require(player1 == msg.sender, \\\"!player\\\");\\n            (me, opponent) = (player1, player0);\\n        }\\n    }\\n\\n    function _recover(bytes32 hash, bytes calldata signature) private pure returns (address) {\\n        return ECDSA.recover(ECDSA.toEthSignedMessageHash(hash), signature);\\n    }\\n\\n    function _verify(bytes32 hash, address signer, bytes calldata signature) private pure {\\n        if (_recover(hash, signature) != signer) {\\n            revert BadSignature(signer);\\n        }\\n    }\\n\\n    // GAME LOGIC\\n    function initialState(uint256 gameId) public view returns (State memory) {\\n        Game storage game = getGame[gameId];\\n        address[SIZE][SIZE] memory board;\\n        return State({\\n            lastPlayer: game.player1, // player0 should start\\n            board: board\\n        });\\n    }\\n\\n    function doMove(State memory state, Move calldata move) public pure returns (State memory) {\\n        require(state.board[move.i][move.j] == address(0), \\\"!empty\\\");\\n        require(move.player != state.lastPlayer, \\\"!turn\\\");\\n        state.board[move.i][move.j] = move.player;\\n        state.lastPlayer = move.player;\\n        return state;\\n    }\\n\\n    function checkWinner(address[SIZE][SIZE] memory board, address winner) public pure returns (bool) {\\n        // Check verticals\\n        for (uint256 i = 0; i < SIZE; i++) {\\n            uint256 sum = 0;\\n            for (uint256 j = 0; j < SIZE; j++) {\\n                if (board[i][j] == winner) {\\n                    sum += 1;\\n                }\\n            }\\n            if (sum == SIZE) {\\n                return true;\\n            }\\n        }\\n\\n        // Check horizontals\\n        for (uint256 j = 0; j < SIZE; j++) {\\n            uint256 sum = 0;\\n            for (uint256 i = 0; i < SIZE; i++) {\\n                if (board[i][j] == winner) {\\n                    sum += 1;\\n                }\\n            }\\n            if (sum == SIZE) {\\n                return true;\\n            }\\n        }\\n\\n        // Check diagonals\\n        {\\n            uint256 sum = 0;\\n            for (uint256 i = 0; i < SIZE; i++) {\\n                if (board[i][i] == winner) {\\n                    sum += 1;\\n                }\\n            }\\n            if (sum == SIZE) {\\n                return true;\\n            }\\n        }\\n        {\\n            uint256 sum = 0;\\n            for (uint256 i = 0; i < SIZE; i++) {\\n                if (board[SIZE - i - 1][i] == winner) {\\n                    sum += 1;\\n                }\\n            }\\n            if (sum == SIZE) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xe68bfc7de1f81dc68c1dc12b69bad8f43d5d7871e72269b211d0e804287b5fb2\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80638e19e59e116100de578063aa33cf2011610097578063bdffd28211610071578063bdffd282146103ca578063c952965b146103d2578063dc1140ad146103f6578063fd1563451461041957600080fd5b8063aa33cf2014610375578063abfd6da514610388578063b39c6952146103a857600080fd5b80638e19e59e146102985780639217a926146102b85780639b8a8ab0146102cb578063a2f77bcc146102de578063a4fa2f2714610359578063a99dfa5c1461036c57600080fd5b80634822144e1161014b57806361de6e1c1161012557806361de6e1c1461025d578063710c10251461027057806379c29403146102705780637ecebe001461027857600080fd5b80634822144e14610221578063600f150c146101b9578063619d36ef1461025557600080fd5b8063025a506a1461019357806302bb7487146101b95780630d7876b6146101d357806311afc10c146101e857806323380748146101fb5780632d6c2dc71461020e575b600080fd5b6101a66101a1366004611e27565b61042c565b6040519081526020015b60405180910390f35b6101c1600081565b60405160ff90911681526020016101b0565b6101e66101e1366004611eac565b61047c565b005b6101e66101f6366004611eac565b6104db565b6101e6610209366004611f70565b610527565b6101a661021c366004611c39565b6105bf565b61023461022f366004611dbe565b61062b565b6040805160ff90931683526001600160a01b039091166020830152016101b0565b6101c1600281565b6101a661026b366004611f4c565b6106f0565b6101c1600181565b6101a6610286366004611c39565b60026020526000908152604090205481565b6102ab6102a6366004611d7d565b610720565b6040516101b09190612108565b6101e66102c6366004611eac565b6108a7565b6101a66102d9366004611e62565b61091f565b6103266102ec366004611e0f565b6000602081905290815260409020805460018201546002909201546001600160a01b0391821692821691811690600160a01b900460ff1684565b604080516001600160a01b0395861681529385166020850152919093169082015260ff90911660608201526080016101b0565b6101e6610367366004611c5a565b610936565b6101a6610e1081565b6101e6610383366004611e0f565b610b4b565b6101a6610396366004611c39565b60016020526000908152604090205481565b6103bb6103b6366004611eac565b610c9e565b6040516101b093929190612117565b6101c1600381565b6103e56103e0366004611e0f565b610d60565b6040516101b095949392919061204d565b610409610404366004611ce8565b610e52565b60405190151581526020016101b0565b6102ab610427366004611e0f565b611142565b600083838360405160200161045d939291909283526001600160a01b03918216602084015216604082015260600190565b6040516020818303038152906040528051906020012090509392505050565b6000878152602081905260409020600201548790600160a01b900460ff16156104c05760405162461bcd60e51b81526004016104b7906120e4565b60405180910390fd5b6104d1600189898989898989611186565b5050505050505050565b6000878152602081905260409020600201548790600160a01b900460ff16156105165760405162461bcd60e51b81526004016104b7906120e4565b6104d1600089898989898989611186565b6000878152602081905260409020600201548790600160a01b900460ff16156105625760405162461bcd60e51b81526004016104b7906120e4565b6000888152602081905260408120908061057b836113e3565b91509150600061058c8c8c8c6106f0565b905061059a81848b8b611460565b6105a681838989611460565b6105b1848c8c6114ad565b505050505050505050505050565b6001600160a01b038116600090815260026020908152604080832054905161060d92469230928792019384526001600160a01b03928316602085015291166040830152606082015260800190565b60408051601f19818403018152919052805160209091012092915050565b6020840151600090819081906106419086610e52565b90506000610653886020015186610e52565b905081156106a55780156106975760405162461bcd60e51b815260206004820152600b60248201526a74776f2077696e6e65727360a81b60448201526064016104b7565b6001869350935050506106e7565b80156106b9576001859350935050506106e7565b6106c4600380612221565b60ff168714156106dd57600260009350935050506106e7565b6000809350935050505b94509492505050565b604080516020810185905260ff8416918101919091526001600160a01b038216606082015260009060800161045d565b610728611969565b6020808401516000918401356003811061075257634e487b7160e01b600052603260045260246000fd5b602002015183604001356003811061077a57634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b0316146107be5760405162461bcd60e51b815260206004820152600660248201526521656d70747960d01b60448201526064016104b7565b82516001600160a01b03166107d66020840184611c39565b6001600160a01b031614156108155760405162461bcd60e51b815260206004820152600560248201526410ba3ab93760d91b60448201526064016104b7565b6108226020830183611c39565b836020015183602001356003811061084a57634e487b7160e01b600052603260045260246000fd5b602002015183604001356003811061087257634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091015261089390830183611c39565b6001600160a01b0316835250815b92915050565b6000878152602081905260409020600201548790600160a01b900460ff16156108e25760405162461bcd60e51b81526004016104b7906120e4565b6000806108f48a8a8a8a8a8a8a610c9e565b60008d81526020819052604090209194509250610913915083836114ad565b50505050505050505050565b600083838360405160200161045d9392919061214a565b846001600160a01b0316866001600160a01b031614156109875760405162461bcd60e51b815260206004820152600c60248201526b73616d65206164647265737360a01b60448201526064016104b7565b6001600160a01b038616600090815260016020526040902054156109df5760405162461bcd60e51b815260206004820152600f60248201526e616c726561647920706c6179696e6760881b60448201526064016104b7565b6001600160a01b03851660009081526001602052604090205415610a375760405162461bcd60e51b815260206004820152600f60248201526e616c726561647920706c6179696e6760881b60448201526064016104b7565b6000610a42876105bf565b9050610a5b610a538289600061042c565b888787611460565b610a71610a6982898961042c565b878585611460565b6001600160a01b0387166000908152600260205260408120805491610a958361229c565b90915550506001600160a01b039687166000818152600160208181526040808420869055998b168084528a84208690558a51608081018c52948552848201908152848b0184815260608601858152968552918490529990922092518354908b166001600160a01b031991821617845598519083018054918b169190991617909755955160029096018054915160ff16600160a01b026001600160a81b031990921696909716959095179490941790945550505050565b6000818152602081905260409020600201548190600160a01b900460ff1615610b865760405162461bcd60e51b81526004016104b7906120e4565b600082815260208190526040812090610b9e826113e3565b50600085815260036020526040902060028101549192509060ff16600114610bf55760405162461bcd60e51b815260206004820152600a602482015269085c995c5d595cdd195960b21b60448201526064016104b7565b80546001600160a01b03838116911614610c3e5760405162461bcd60e51b815260206004820152600a60248201526910b932b8bab2b9ba32b960b11b60448201526064016104b7565b610e108160010154610c509190612209565b4211610c8b5760405162461bcd60e51b815260206004820152600a602482015269085d1a5b5959081bdd5d60b21b60448201526064016104b7565b610c97836001846114ad565b5050505050565b610ca6611969565b600080600080610cc66000808e81526020019081526020016000206113e3565b91509150610cd88c8c8c858d8d6115aa565b610ce68c8c8c848b8b6115aa565b610cef8c611142565b945060005b8a811015610d3e57610d2b868d8d84818110610d2057634e487b7160e01b600052603260045260246000fd5b905060600201610720565b5080610d368161229c565b915050610cf4565b50610d4b858b848461062b565b959d909c50949a509398505050505050505050565b6003602081815260009283526040928390208054600182015460028301548651606081018852958401546001600160a01b0390811687526004850154958701959095526005840154968601969096526006830180549490921695909460ff9091169390929190610dcf90612261565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfb90612261565b8015610e485780601f10610e1d57610100808354040283529160200191610e48565b820191906000526020600020905b815481529060010190602001808311610e2b57829003601f168201915b5050505050905085565b6000805b6003811015610f16576000805b6003811015610eee57846001600160a01b0316868460038110610e9657634e487b7160e01b600052603260045260246000fd5b60200201518260038110610eba57634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b03161415610edc57610ed9600183612209565b91505b80610ee68161229c565b915050610e63565b506003811415610f03576001925050506108a1565b5080610f0e8161229c565b915050610e56565b5060005b6003811015610fda576000805b6003811015610fb257846001600160a01b0316868260038110610f5a57634e487b7160e01b600052603260045260246000fd5b60200201518460038110610f7e57634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b03161415610fa057610f9d600183612209565b91505b80610faa8161229c565b915050610f27565b506003811415610fc7576001925050506108a1565b5080610fd28161229c565b915050610f1a565b506000805b600381101561106a57836001600160a01b031685826003811061101257634e487b7160e01b600052603260045260246000fd5b6020020151826003811061103657634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b0316141561105857611055600183612209565b91505b806110628161229c565b915050610fdf565b50600381141561107e5760019150506108a1565b506000805b6003811015611124576001600160a01b0384168560016110a484600361224a565b6110ae919061224a565b600381106110cc57634e487b7160e01b600052603260045260246000fd5b602002015182600381106110f057634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b031614156111125761110f600183612209565b91505b8061111c8161229c565b915050611083565b5060038114156111385760019150506108a1565b5060009392505050565b61114a611969565b6000828152602081905260409020611160611991565b604080518082019091526001909201546001600160a01b03168252602082015292915050565b600087815260208190526040812061119d906113e3565b509050600186116111d95760405162461bcd60e51b8152602060048201526006602482015265216d6f76657360d01b60448201526064016104b7565b3687876111e760018261224a565b81811061120457634e487b7160e01b600052603260045260246000fd5b606002919091019150506001600160a01b0382166112256020830183611c39565b6001600160a01b03161461126f5760405162461bcd60e51b81526020600482015260116024820152701b5bdd99481b9bdd081c1c9bdd9a591959607a1b60448201526064016104b7565b60006112808a8a8a8a8a8a8a610c9e565b5091505060ff8116156112c45760405162461bcd60e51b815260206004820152600c60248201526b21696e2070726f677265737360a01b60448201526064016104b7565b6040518060a00160405280846001600160a01b031681526020014281526020018c60ff168152602001838036038101906112fe9190611d1d565b815260200188888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250508c815260036020818152604092839020855181546001600160a01b03199081166001600160a01b039283161783558784015160018401558786015160028401805460ff191660ff909216919091179055606088015180519584018054909216959092169490941790935582820151600482015591909201516005820155608084015180519193506113d39260068501929101906119be565b5050505050505050505050505050565b8054600182015460009182916001600160a01b039182169116338214156114105790925090508181611459565b6001600160a01b03811633146114525760405162461bcd60e51b815260206004820152600760248201526610b83630bcb2b960c91b60448201526064016104b7565b9250905080825b5050915091565b826001600160a01b0316611475858484611652565b6001600160a01b0316146114a757604051639a7d38d960e01b81526001600160a01b03841660048201526024016104b7565b50505050565b60ff8216600214806114c2575060ff82166001145b6114f75760405162461bcd60e51b81526004016104b79060208082526004908201526308595b9960e21b604082015260600190565b60ff821660021415611548576001600160a01b038116156115485760405162461bcd60e51b815260206004820152600b60248201526a216164647265737328302960a81b60448201526064016104b7565b6002830180546001600160a81b031916600160a01b60ff94909416939093026001600160a01b031916929092176001600160a01b0391821617909155815481166000908152600160208190526040808320839055930154909116815290812055565b6000841580159061160c57506001600160a01b03841686866115cd60018261224a565b8181106115ea57634e487b7160e01b600052603260045260246000fd5b6116009260206060909202019081019150611c39565b6001600160a01b031614155b61161757600061161a565b60015b60ff1690506116496116418888600089611634878261224a565b926102d9939291906121de565b858585611460565b50505050505050565b60006116ea6116ae856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116f292505050565b949350505050565b60008151604114156117265760208201516040830151606084015160001a61171c86828585611796565b93505050506108a1565b81516040141561174e576020820151604083015161174585838361193f565b925050506108a1565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104b7565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156118135760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104b7565b8360ff16601b148061182857508360ff16601c145b61187f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016104b7565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156118d3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166119365760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104b7565b95945050505050565b60006001600160ff1b03821660ff83901c601b0161195f86828785611796565b9695505050505050565b604051806040016040528060006001600160a01b0316815260200161198c611991565b905290565b60405180606001604052806003905b6119a8611a42565b8152602001906001900390816119a05790505090565b8280546119ca90612261565b90600052602060002090601f0160209004810192826119ec5760008555611a32565b82601f10611a0557805160ff1916838001178555611a32565b82800160010185558215611a32579182015b82811115611a32578251825591602001919060010190611a17565b50611a3e929150611a60565b5090565b60405180606001604052806003906020820280368337509192915050565b5b80821115611a3e5760008155600101611a61565b80356001600160a01b0381168114611a8c57600080fd5b919050565b6000601f8381840112611aa2578182fd5b611aaa6121b5565b80848661012087011115611abc578485fd5b845b6003808210611acd5750611b33565b8886840112611ada578687fd5b611ae26121b5565b8084606086018c811115611af4578a8bfd5b8a5b85811015611b1c57611b0783611a75565b85526020948501949290920191600101611af6565b509188525060209096019593505050600101611abe565b50909695505050505050565b60008083601f840112611b50578182fd5b50813567ffffffffffffffff811115611b67578182fd5b602083019150836020606083028501011115611b8257600080fd5b9250929050565b60008083601f840112611b9a578182fd5b50813567ffffffffffffffff811115611bb1578182fd5b602083019150836020828501011115611b8257600080fd5b60006101408284031215611bdb578081fd5b6040516040810181811067ffffffffffffffff82111715611bfe57611bfe6122cd565b604052905080611c0d83611a75565b8152611c1c8460208501611a91565b60208201525092915050565b803560ff81168114611a8c57600080fd5b600060208284031215611c4a578081fd5b611c5382611a75565b9392505050565b60008060008060008060808789031215611c72578182fd5b611c7b87611a75565b9550611c8960208801611a75565b9450604087013567ffffffffffffffff80821115611ca5578384fd5b611cb18a838b01611b89565b90965094506060890135915080821115611cc9578384fd5b50611cd689828a01611b89565b979a9699509497509295939492505050565b6000806101408385031215611cfb578182fd5b611d058484611a91565b9150611d146101208401611a75565b90509250929050565b600060608284031215611d2e578081fd5b6040516060810181811067ffffffffffffffff82111715611d5157611d516122cd565b604052611d5d83611a75565b815260208301356020820152604083013560408201528091505092915050565b6000808284036101a0811215611d91578283fd5b611d9b8585611bc9565b9250606061013f1982011215611daf578182fd5b50610140830190509250929050565b6000806000806101a08587031215611dd4578384fd5b611dde8686611bc9565b93506101408501359250611df56101608601611a75565b9150611e046101808601611a75565b905092959194509250565b600060208284031215611e20578081fd5b5035919050565b600080600060608486031215611e3b578283fd5b83359250611e4b60208501611a75565b9150611e5960408501611a75565b90509250925092565b600080600060408486031215611e76578283fd5b83359250602084013567ffffffffffffffff811115611e93578283fd5b611e9f86828701611b3f565b9497909650939450505050565b60008060008060008060006080888a031215611ec6578485fd5b87359650602088013567ffffffffffffffff80821115611ee4578687fd5b611ef08b838c01611b3f565b909850965060408a0135915080821115611f08578283fd5b611f148b838c01611b89565b909650945060608a0135915080821115611f2c578283fd5b50611f398a828b01611b89565b989b979a50959850939692959293505050565b600080600060608486031215611f60578081fd5b83359250611e4b60208501611c28565b600080600080600080600060a0888a031215611f8a578081fd5b87359650611f9a60208901611c28565b9550611fa860408901611a75565b9450606088013567ffffffffffffffff80821115611fc4578283fd5b611fd08b838c01611b89565b909650945060808a0135915080821115611f2c578283fd5b80516001600160a01b0390811683526020808301518185016000805b600380821061201357506104d1565b845184845b838110156120365782518a1682529188019190880190600101612018565b505050938501935060609290920191600101612004565b600060018060a01b0380881683526020878185015260ff87166040850152818651166060850152808601516080850152604086015160a085015260e060c0850152845191508160e0850152825b828110156120b7578581018201518582016101000152810161209a565b828111156120c9578361010084870101525b5050601f01601f191691909101610100019695505050505050565b6020808252600a908201526919d85b5948195b99195960b21b604082015260600190565b61014081016108a18284611fe8565b61018081016121268286611fe8565b60ff939093166101408201526001600160a01b039190911661016090910152919050565b838152604060208083018290528282018490526000919060609081850187855b888110156121a6576001600160a01b0361218383611a75565b16835281840135848401528582013586840152918401919084019060010161216a565b50909998505050505050505050565b6040516060810167ffffffffffffffff811182821017156121d8576121d86122cd565b60405290565b600080858511156121ed578182fd5b838611156121f9578182fd5b5050606083020193919092039150565b6000821982111561221c5761221c6122b7565b500190565b600060ff821660ff84168160ff0481118215151615612242576122426122b7565b029392505050565b60008282101561225c5761225c6122b7565b500390565b600181811c9082168061227557607f821691505b6020821081141561229657634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156122b0576122b06122b7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220b6c0ba80c34c6e0df3e5ab278c7a60d9bd276ea8d2bb880c110ee8af66076db164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 223,
        "contract": "contracts/TicTacToe.sol:TicTacToe",
        "label": "getGame",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Game)195_storage)"
      },
      {
        "astId": 227,
        "contract": "contracts/TicTacToe.sol:TicTacToe",
        "label": "getGameId",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 231,
        "contract": "contracts/TicTacToe.sol:TicTacToe",
        "label": "nonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 236,
        "contract": "contracts/TicTacToe.sol:TicTacToe",
        "label": "getEndGameWithTimeoutRequest",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(GameEndRequest)207_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Game)195_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)195_storage"
      },
      "t_mapping(t_uint256,t_struct(GameEndRequest)207_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GameEndRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(GameEndRequest)207_storage"
      },
      "t_struct(Game)195_storage": {
        "encoding": "inplace",
        "label": "struct Game",
        "members": [
          {
            "astId": 188,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "player0",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 190,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "player1",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 192,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "winner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 194,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "result",
            "offset": 20,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(GameEndRequest)207_storage": {
        "encoding": "inplace",
        "label": "struct GameEndRequest",
        "members": [
          {
            "astId": 197,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "requester",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 199,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "createdAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 201,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "kind",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 204,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "move",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Move)214_storage"
          },
          {
            "astId": 206,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "signature",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Move)214_storage": {
        "encoding": "inplace",
        "label": "struct Move",
        "members": [
          {
            "astId": 209,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "player",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 211,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "i",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 213,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "j",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}